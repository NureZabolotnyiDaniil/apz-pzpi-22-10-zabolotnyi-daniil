# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
param(
    [int]$Replicas = 5,
    [string]$ServiceUrl = ""
)

Write-Host "üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è SmartLighting" -ForegroundColor Green

# –û—Ç—Ä–∏–º—É—î–º–æ URL —Å–µ—Ä–≤—ñ—Å—É —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ
if ([string]::IsNullOrEmpty($ServiceUrl)) {
    Write-Host "üîç –û—Ç—Ä–∏–º—É—î–º–æ URL —Å–µ—Ä–≤—ñ—Å—É..." -ForegroundColor Blue
    $ServiceUrl = minikube service smartlighting-backend-service --url
    Write-Host "URL: $ServiceUrl" -ForegroundColor Cyan
}

# –ú–∞—Å—à—Ç–∞–±—É—î–º–æ –¥–æ –∑–∞–¥–∞–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ–ø–ª—ñ–∫
Write-Host "üìà –ú–∞—Å—à—Ç–∞–±—É—î–º–æ –¥–æ $Replicas —Ä–µ–ø–ª—ñ–∫..." -ForegroundColor Blue
kubectl scale deployment smartlighting-backend --replicas=$Replicas

# –ú–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
Write-Host "‚è≥ –ß–µ–∫–∞—î–º–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –ø–æ–¥—ñ–≤..." -ForegroundColor Yellow
kubectl rollout status deployment/smartlighting-backend --timeout=300s

# –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
Write-Host "üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:" -ForegroundColor Green
kubectl get pods -l app=smartlighting-backend
kubectl get hpa

# –í–∏–∫–æ–Ω—É—î–º–æ –Ω–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç
Write-Host "üî• –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç..." -ForegroundColor Red
Write-Host "–ù–∞—Ç–∏—Å–Ω–∏ Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ —Ç–µ—Å—Ç—É" -ForegroundColor Yellow

$RequestCount = 0
$StartTime = Get-Date

while ($true) {
    try {
        # –†–æ–±–∏–º–æ 10 –∑–∞–ø–∏—Ç—ñ–≤ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        $jobs = 1..10 | ForEach-Object {
            Start-Job -ScriptBlock {
                param($url)
                try {
                    $response = Invoke-WebRequest -Uri "$url/health" -TimeoutSec 5 -UseBasicParsing
                    return @{ Success = $true; StatusCode = $response.StatusCode; Time = (Get-Date) }
                } catch {
                    return @{ Success = $false; Error = $_.Exception.Message; Time = (Get-Date) }
                }
            } -ArgumentList $ServiceUrl
        }
        
        # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å
        $results = $jobs | Wait-Job | Receive-Job
        $jobs | Remove-Job
        
        $RequestCount += 10
        $ElapsedTime = (Get-Date) - $StartTime
        $RPS = [math]::Round($RequestCount / $ElapsedTime.TotalSeconds, 2)
        
        $SuccessCount = ($results | Where-Object { $_.Success }).Count
        
        Write-Host "–ó–∞–ø–∏—Ç—ñ–≤: $RequestCount | RPS: $RPS | –£—Å–ø—ñ—à–Ω–∏—Ö: $SuccessCount/10" -ForegroundColor Cyan
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞–Ω HPA –∫–æ–∂–Ω—ñ 30 –∑–∞–ø–∏—Ç—ñ–≤
        if ($RequestCount % 30 -eq 0) {
            Write-Host "`nüìä –°—Ç–∞–Ω –∞–≤—Ç–æ—Å–∫–µ–π–ª–µ—Ä–∞:" -ForegroundColor Blue
            kubectl get hpa smartlighting-backend-hpa
            kubectl get pods -l app=smartlighting-backend
            Write-Host ""
        }
        
        Start-Sleep -Seconds 1
        
    } catch {
        Write-Host "–ü–æ–º–∏–ª–∫–∞: $($_.Exception.Message)" -ForegroundColor Red
        Start-Sleep -Seconds 2
    }
}

Write-Host "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" -ForegroundColor Green 
#!/usr/bin/env python3
"""
–ù–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–ª—å–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è SmartLighting API
–¶–µ–π —Å–∫—Ä–∏–ø—Ç –≤–∏–∫–æ–Ω—É—î –Ω–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–ª—å–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
"""

import asyncio
import aiohttp
import time
import argparse
import json
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor
from typing import List, Dict, Any

class LoadTester:
    def __init__(self, base_url: str, max_concurrent: int = 50):
        self.base_url = base_url.rstrip('/')
        self.max_concurrent = max_concurrent
        self.results = []
        
    async def make_request(self, session: aiohttp.ClientSession, endpoint: str) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω—É—î –æ–¥–∏–Ω HTTP –∑–∞–ø–∏—Ç"""
        start_time = time.time()
        try:
            async with session.get(f"{self.base_url}{endpoint}") as response:
                end_time = time.time()
                return {
                    'endpoint': endpoint,
                    'status_code': response.status,
                    'response_time': end_time - start_time,
                    'timestamp': datetime.now().isoformat(),
                    'success': 200 <= response.status < 300
                }
        except Exception as e:
            end_time = time.time()
            return {
                'endpoint': endpoint,
                'status_code': 0,
                'response_time': end_time - start_time,
                'timestamp': datetime.now().isoformat(),
                'success': False,
                'error': str(e)
            }
    
    async def run_batch(self, num_requests: int, endpoints: List[str]) -> List[Dict[str, Any]]:
        """–í–∏–∫–æ–Ω—É—î –ø–∞–∫–µ—Ç –∑–∞–ø–∏—Ç—ñ–≤"""
        connector = aiohttp.TCPConnector(limit=self.max_concurrent)
        timeout = aiohttp.ClientTimeout(total=30)
        
        async with aiohttp.ClientSession(connector=connector, timeout=timeout) as session:
            tasks = []
            
            for i in range(num_requests):
                endpoint = endpoints[i % len(endpoints)]
                task = self.make_request(session, endpoint)
                tasks.append(task)
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—ñ–¥ –≤–∏–∫–ª—é—á–µ–Ω—å
            valid_results = []
            for result in results:
                if isinstance(result, dict):
                    valid_results.append(result)
                else:
                    valid_results.append({
                        'endpoint': 'unknown',
                        'status_code': 0,
                        'response_time': 0,
                        'timestamp': datetime.now().isoformat(),
                        'success': False,
                        'error': str(result)
                    })
            
            return valid_results
    
    def analyze_results(self, results: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª—ñ–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        if not results:
            return {'error': 'No results to analyze'}
        
        successful_requests = [r for r in results if r['success']]
        failed_requests = [r for r in results if not r['success']]
        
        response_times = [r['response_time'] for r in successful_requests]
        
        if not response_times:
            return {'error': 'No successful requests'}
        
        total_time = max([r['timestamp'] for r in results]) if results else 0
        start_time = min([r['timestamp'] for r in results]) if results else 0
        
        return {
            'total_requests': len(results),
            'successful_requests': len(successful_requests),
            'failed_requests': len(failed_requests),
            'success_rate': len(successful_requests) / len(results) * 100,
            'avg_response_time': sum(response_times) / len(response_times),
            'min_response_time': min(response_times),
            'max_response_time': max(response_times),
            'requests_per_second': len(results) / max(1, (time.time() - time.time())) if results else 0,
            'status_codes': self._count_status_codes(results)
        }
    
    def _count_status_codes(self, results: List[Dict[str, Any]]) -> Dict[int, int]:
        """–ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—ñ–∑–Ω–∏—Ö —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ñ–≤"""
        status_counts = {}
        for result in results:
            status = result['status_code']
            status_counts[status] = status_counts.get(status, 0) + 1
        return status_counts
    
    async def run_load_test(self, duration_seconds: int, requests_per_second: int, endpoints: List[str]):
        """–ó–∞–ø—É—Å–∫–∞—î –Ω–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–ª—å–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        print(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ –Ω–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
        print(f"   - –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration_seconds} —Å–µ–∫—É–Ω–¥")
        print(f"   - –ó–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Å–µ–∫—É–Ω–¥—É: {requests_per_second}")
        print(f"   - –¢–µ—Å—Ç–æ–≤—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏: {endpoints}")
        print(f"   - –ë–∞–∑–æ–≤–∏–π URL: {self.base_url}")
        
        all_results = []
        start_time = time.time()
        
        while time.time() - start_time < duration_seconds:
            batch_start = time.time()
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –ø–∞–∫–µ—Ç –∑–∞–ø–∏—Ç—ñ–≤
            batch_results = await self.run_batch(requests_per_second, endpoints)
            all_results.extend(batch_results)
            
            # –í–∏–≤–æ–¥–∏–º–æ –ø—Ä–æ–º—ñ–∂–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            successful = len([r for r in batch_results if r['success']])
            print(f"‚è±Ô∏è  –°–µ–∫—É–Ω–¥–∞ {int(time.time() - start_time)}: {successful}/{len(batch_results)} —É—Å–ø—ñ—à–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤")
            
            # –ß–µ–∫–∞—î–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å–µ–∫—É–Ω–¥–∏
            elapsed = time.time() - batch_start
            sleep_time = max(0, 1.0 - elapsed)
            if sleep_time > 0:
                await asyncio.sleep(sleep_time)
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        analysis = self.analyze_results(all_results)
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
        print(f"   - –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤: {analysis['total_requests']}")
        print(f"   - –£—Å–ø—ñ—à–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤: {analysis['successful_requests']}")
        print(f"   - –ù–µ–≤–¥–∞–ª–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤: {analysis['failed_requests']}")
        print(f"   - –í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ: {analysis['success_rate']:.2f}%")
        print(f"   - –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {analysis['avg_response_time']:.3f}s")
        print(f"   - –ú—ñ–Ω —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {analysis['min_response_time']:.3f}s")
        print(f"   - –ú–∞–∫—Å —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {analysis['max_response_time']:.3f}s")
        print(f"   - –°—Ç–∞—Ç—É—Å –∫–æ–¥–∏: {analysis['status_codes']}")
        
        return all_results, analysis

async def main():
    parser = argparse.ArgumentParser(description='–ù–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–ª—å–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è SmartLighting API')
    parser.add_argument('--url', default='http://localhost', help='–ë–∞–∑–æ–≤–∏–π URL API')
    parser.add_argument('--duration', type=int, default=60, help='–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    parser.add_argument('--rps', type=int, default=10, help='–ó–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Å–µ–∫—É–Ω–¥—É')
    parser.add_argument('--concurrent', type=int, default=50, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑\'—î–¥–Ω–∞–Ω—å')
    
    args = parser.parse_args()
    
    # –¢–µ—Å—Ç–æ–≤—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏
    endpoints = [
        '/',
        '/health',
        '/test',
        '/docs',
    ]
    
    tester = LoadTester(args.url, args.concurrent)
    
    try:
        results, analysis = await tester.run_load_test(args.duration, args.rps, endpoints)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"load_test_results_{timestamp}.json"
        
        with open(filename, 'w') as f:
            json.dump({
                'test_parameters': {
                    'url': args.url,
                    'duration': args.duration,
                    'requests_per_second': args.rps,
                    'max_concurrent': args.concurrent,
                    'endpoints': endpoints
                },
                'analysis': analysis,
                'raw_results': results
            }, f, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ {filename}")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 
Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії








Лабораторна робота №3
з дисципліни: «Архітектура програмного забезпечення» 








Виконав:
ст. гр. ПЗПІ-22-10
Заболотний Д. М.	Перевірив:
ас. кафедри ПІ
Дашенков Д. С.
	








Харків 2025
 	3.1 Опис застосунку
Це односторінковий веб-застосунок керування парками вуличного освітлення, побудований на стеку React 18 + TypeScript та зібраний Vite. Розмітка стилізується Tailwind CSS і компонентною бібліотекою Heroicons, що забезпечує легку кастомізацію UI без потреби у власних CSS-файлах. Клієнтський роутинг реалізовано через React Router v6, а запити до серверного REST API (FastAPI) виконуються Axios-шарою `apiService` із JWT-інтерцепторами для автоматичного підключення токена. Кешування та синхронізацію даних забезпечує TanStack React Query; форми валідуються React-Hook-Form + Zod із миттєвим відгуком. Інтернаціоналізація здійснюється через react-i18next (JSON-локалі з динамічною підвантажкою), підтримуючи щонайменше українську й англійську. Для push-сповіщень мобільного додатка інтегровано Firebase Cloud Messaging (токени реєструються через окремий REST-endpoint). Основний функціонал Front-end охоплює:  
• адміністраторську авторизацію й реєстрацію;  
• локалізацію інтерфейсу;  
• дашборд з агрегованою аналітикою (статуси ліхтарів, поломки, парки);  
• CRUD-операції для ліхтарів, парків, компаній, ремонтників, ремонтів та поломок;  
• систему сповіщень про нові поломки;  
• експорт резервних копій та імпорт даних (JSON);  
• профіль адміністратора з керуванням правами й зоною ризику (деактивація акаунта).

3.2 Взаємодія компонентів  
Архітектура Front-end побудована за принципом «pages / layouts / ui / services»:  
• Layout-рівень (Header, Sidebar, NotificationBell, Layout) формує постійний каркас, кладучи AuthContext + I18nextProvider у корінь, що робить стан авторизації та переклади глобально доступними.  
• Кожна маршрутна сторінка (наприклад, `LanternList`, `RenovationForm`) підʼєднана до Router і у `useEffect` / React Query `useQuery` ініціює читання даних з `apiService`. Повернена проміса стікає у кеш; при мутаціях (`useMutation`) відповідні ключі інвалідуються, що тригерить автоматичний рефетч та миттєво оновлює UI.  
• `apiService` інкапсулює Axios-інстанс із інтерцепторами: перед запитом додає `Authorization: Bearer <JWT>`, після відповіді перехоплює 401, обнуляє `localStorage` і редіректить на `/login`. Отже компоненти не знають про деталі аутентифікації.  
• AuthContext зберігає поточного користувача та глобальні методи `login/logout/register`; споживається сторінками Auth і Header (для відображення імені та кнопки виходу).  
• NotificationBell по Web Worker-таймеру читає `/breakdown/list`; ID прочитаних повідомлень кешуються у `localStorage`, тому одна й та сама поломка не дублюється.  
• Компоненти форм (наприклад, `BreakdownForm`) використовують React-Hook-Form; після сабміту `useMutation` відправляє `POST /breakdown/add`, а `onSuccess` закриває модальне вікно та інвалідує `'breakdowns'`.  
• Локалізація: звʼязані ключі (`renovation.status.label` тощо) беруться через `t()`; зміна мови тригерить рекомпозицію всіх компонентів без повного релоаду.  
• Для резервного копіювання кнопка DataManagement викликає `apiService.createBackup()`; бекенд повертає JSON-файл, що зберігається через Blob API. Імпорт працює обернено - використовує `FormData` та `POST /admin/import`.  
• Push-токен мобільного застосунку реєструється через `apiService.registerMobileNotifications(token)`, після чого бекенд пересилає FCM-повідомлення; десктоп-front реагує лише на REST-polling, залишаючи реальний push мобільному клієнту.  

Таким чином, компоненти чітко поділені за відповідальністю, обмінюються даними лише через контексти, React Query cache та props, а вся транспортна логіка ізольована у `apiService`, що спрощує тестування та подальшу підтримку.
     
	

2.3 Діаграми
     

Рисунок 1 – UML діаграма прецедентів


Рисунок 2 – UML діаграма компонентів


Рисунок 3 – UML діаграма діяльності для авторизації


Рисунок 4 – UML діаграма діяльності для ліхтарів, парків та поломок


Рисунок 5 – UML – діаграма станів для авторизації

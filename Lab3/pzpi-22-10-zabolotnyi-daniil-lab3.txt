Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії








Лабораторна робота №3
з дисципліни: «Архітектура програмного забезпечення» 








Виконав:
ст. гр. ПЗПІ-22-10
Заболотний Д. М.	Перевірив:
ас. кафедри ПІ
Дашенков Д. С.
	








Харків 2025
 	3.1 Опис веб‑застосунку
Цей односторінковий веб‑додаток призначений для управління парками вуличного освітлення. Реалізований на базі React 18 із статичною типізацією TypeScript та збірником Vite. Стилізація здійснюється за допомогою Tailwind CSS і компонентної бібліотеки Heroicons, що забезпечує гнучке налаштування інтерфейсу без необхідності створення власних CSS‑файлів. Клієнтська навігація реалізована за допомогою React Router v6, а взаємодія з REST API (FastAPI) відбувається через шар apiService, побудований на Axios із вбудованими JWT‑інтерцепторами для автоматичного додавання токена до кожного запиту.
Для керування станом запитів і кешування даних застосовано TanStack React Query, а перевірку коректності введених даних у формах — комбінація React Hook Form та Zod з миттєвим відгуком. Інтернаціоналізація реалізована через react-i18next із динамічним завантаженням локалей у форматі JSON; наразі підтримуються українська та англійська мови. Для надсилання push‑сповіщень у мобільному клієнті інтегровано Firebase Cloud Messaging: токени реєструються через окремий REST‑ендпоінт.
Основні функціональні модулі фронтенда включають авторизацію та реєстрацію адміністраторів, вибір мови інтерфейсу, дашборд із агрегованою аналітикою (статуси ліхтарів, відомості про поломки, інформація щодо парків), операції створення, читання, оновлення та видалення для ліхтарів, парків, компаній, ремонтників, ремонтів та поломок, систему сповіщень про нові поломки, експорт резервних копій і імпорт даних у форматі JSON, а також профіль адміністратора з налаштуванням прав доступу й можливістю деактивації облікового запису.

3.2 Взаємодія компонентів
Архітектурна схема фронтенда побудована за принципом pages / layouts / ui / services.
1. Layout‑рівень формує каркасну структуру завдяки компонентам Header, Sidebar, NotificationBell і Layout. На цьому рівні підключено AuthContext та I18nextProvider, що забезпечує глобальну доступність стану авторизації та локалізації.
2. Кожен маршрутний компонент, такий як LanternList або RenovationForm, під’єднується до React Router і в useEffect або через React Query (useQuery) ініціює запит до apiService. Отримані дані кешуються, а при виклику мутацій (useMutation) відповідні ключі інвалідуються, що запускає повторне завантаження даних і оновлення інтерфейсу.
3. apiService інкапсулює налаштований екземпляр Axios з інтерцепторами. До кожного вихідного запиту додається заголовок Authorization: Bearer <JWT>, а у разі відповіді з кодом 401 інтерцептор очищує localStorage та перенаправляє користувача на сторінку входу (/login). Компоненти залишаються незалежними від деталей аутентифікації.
4. AuthContext зберігає дані поточного користувача та надає методи login, logout і register. Цей контекст споживають сторінки авторизації й компонент Header для відображення інформації про користувача та кнопки виходу.
5. NotificationBell періодично за допомогою Web Worker‑таймера опитує ендпоінт /breakdown/list. Ідентифікатори отриманих повідомлень зберігаються в localStorage, що виключає дублювання сповіщень.
6. Компоненти форм, наприклад BreakdownForm, реалізовані за допомогою React Hook Form. Після відправлення форми useMutation виконує POST /breakdown/add; у разі успіху модальне вікно закривається, а кеш React Query інвалідується за ключем breakdowns.
7. Для локалізації текстові ключі (наприклад, renovation.status.label) беруться через функцію t(), а зміна мови автоматично перерендерює компоненти без перезавантаження сторінки.
8. Управління даними здійснюється через кнопку DataManagement: виклик apiService.createBackup() повертає JSON‑файл, який клієнт зберігає через Blob API, а імпорт даних відбувається через FormData та POST /admin/import.
9. Реєстрація токена для мобільного застосунку здійснюється через apiService.registerMobileNotifications(token). Отримані повідомлення на мобільному надходять через FCM, тоді як десктопний клієнт використовує REST‑полінг.

Завдяки чіткому розподілу відповідальності між компонентами, централізованій логіці транспортування даних у apiService, а також використанню контекстів і кешу React Query, система легко тестується, масштабується та підтримується.

	
2.3 Діаграми
     

Рисунок 1 – UML діаграма прецедентів


Рисунок 2 – UML діаграма компонентів


Рисунок 3 – UML діаграма діяльності для авторизації


Рисунок 4 – UML діаграма діяльності для ліхтарів, парків та поломок


Рисунок 5 – UML – діаграма станів для авторизації

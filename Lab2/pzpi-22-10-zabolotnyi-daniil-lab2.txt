Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії








Лабораторна робота №2
з дисципліни: «Архітектура програмного забезпечення» 









Виконав:
ст. гр. ПЗПІ-22-10
Заболотний Д. М.	Перевірив:
ас. кафедри ПІ
Дашенков Д. С.









Харків 2025
2.1 Опис застосунку
Під час лабораторної работи було реалізовано Android застосунок для моніторингу та управління системою розумного освітлення міста. Застосунок призначений для комунальних служб, технічних спеціалістів та активних громадян, які бажають повідомляти про несправності освітлювального обладнання. Головна функціональність системи включає відображення світлових пристроїв та їх статусу (зелений - працює нормально, жовтий - незначні проблеми, червоний - критичні несправності), систему створення звітів про поломки з можливістю додавання фотографій та геолокації, управління сповіщеннями про стан обладнання та особистий профіль користувача з статистикою активності. Застосунок забезпечує можливість швидкого реагування на несправності міського освітлення через зручний інтерфейс та систему повідомлень різних рівнів пріоритету - від низького до критичного. Користувачі можуть сканувати QR-коди на обладнанні для швидкого звітування, відстежувати статус поданих звітів та отримувати актуальні сповіщення про зміни в системі.

2.2 Опис інженерних рішень
Архітектура застосунку побудована на принципах Clean Architecture з чітким розділенням відповідальності між шарами. 
Презентаційний шар реалізований з використанням Jetpack Compose для створення сучасного та швидкого користувацького інтерфейсу, з архітектурою MVI (Model-View-Intent) для управління станом екранів через ViewModel та Contract паттерни. 
Доменний шар містить бізнес-логіку та репозиторії для абстракції доступу до даних, забезпечуючи незалежність від конкретних реалізацій джерел даних. 
Шар даних включає моделі сутностей системи (User, LightDevice, Notification, Report) з енамами для типізації статусів та пріоритетів, а також API абстракції для зовнішніх сервісів. 
Система використовує dependency injection через Hilt/Dagger для забезпечення слабкого зв'язку компонентів та легкого тестування. Асинхронна обробка реалізована через Kotlin Coroutines та Flow для реактивного програмування, що забезпечує відзивність інтерфейсу та ефективне управління ресурсами. 
Додаток використовує Material 3 Design System для консистентного користувацького досвіду та підтримує сучасні Android API (мінімальна версія SDK 24, цільова - 34) з оптимізаціями для різних розмірів екранів та пристроїв.


2.3 Діаграми
2.3.1 UML діаграма прецедентів 
Показує основні функціональні можливості моєї системи та взаємодію з різними типами користувачів. Діаграма наведена на рисунку 2.1.

Рисунок 2.1 – UML діаграма прецедентів

2.3.2
UML діаграма компонентів - демонструє архітектурну структуру застосунку з розподілом на шари та модулі. Діаграма наведена на рисунку 2.2.


Рисунок 2.2 – UML діаграма компонентів


2.3.3
UML діаграма діяльності - відображає послідовність дій користувача при роботі з застосунком. Діаграма наведена на рисунку 2.3.

Рисунок 2.3 – UML діаграма діяльності для авторизації

2.3.4
UML діаграма станів - показує різні стани застосунку та переходи між ними. Діаграми наведені на рисунках 2.4 – 2.7.

Рисунок 2.4 – UML діаграма станів для користувача

Рисунок 2.5 – UML діаграма станів для звітів


Рисунок 2.6 – UML діаграма станів для ліхтарів

Рисунок 2.7 – UML діаграма станів для сповіщень

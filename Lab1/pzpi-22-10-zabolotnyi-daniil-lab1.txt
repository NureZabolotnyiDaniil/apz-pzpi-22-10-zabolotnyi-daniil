Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії








Лабораторна робота №1
з дисципліни: «Архітектура програмного забезпечення» 








Виконав:
ст. гр. ПЗПІ-22-10
Заболотний Д. М.	Перевірив:
ас. кафедри ПІ
Дашенков Д. С.
	








Харків 2025
3. Scope and Limitations
3.1 Scope of Initial Release
Серверна частина, побудована на Python з фреймворком FastAPI та базою даних PostgreSQL, забезпечує центральне управління (збирання, обробка й зберігання даних від усіх IoT-пристроїв парку), надає програмний інтерфейс (REST API) для веб-клієнта та мобільного додатка, обробляє телеметрію (аналіз даних з датчиків руху та струму у реальному часі), має систему сповіщень (виявлення аномальних показників струму та відсутності сигналів від ліхтарів), зберігає історичні дані (статистика відвідувань та споживання енергії) та використовує JWT-токени для авторизації та безпечного доступу до системи. IoT-клієнти на базі ESP32 забезпечують управління освітленням (регулювання напруги та яскравості ліхтарів), сенсорний моніторинг (збирання даних з датчиків руху та струму), комунікацію (передача даних на сервер через HTTP/MQTT протоколи), автономну роботу (енергоефективна робота з можливістю оновлення прошивки) та адаптивне освітлення (автоматичне регулювання на основі виявленого руху).
Односторінковий веб-застосунок надає адміністраторську панель (повний CRUD для ліхтарів, парків, компаній та ремонтів), інтерактивну карту (візуалізація стану всіх ліхтарів з кольоровими індикаторами статусу), аналітичний дашборд (агреговані показники по паркам, поломкам та енергоспоживанню), систему сповіщень (реальний час повідомлень про критичні несправності), багатомовність (підтримка української та англійської мов через react-i18next) та функціонал експорту/імпорту даних (резервне копіювання та відновлення конфігурацій системи). Android застосунок з архітектурою Clean Architecture + MVI забезпечує моніторинг статусу (відображення стану світлових пристроїв з кольоровими індикаторами), систему звітування (створення звітів про поломки з фотографіями та геолокацією), QR-код сканування (швидке звітування через сканування кодів на обладнанні), Push-сповіщення (Firebase Cloud Messaging для критичних повідомлень), профіль користувача (статистика активності та історія поданих звітів) та офлайн підтримку (локальне збереження звітів до відновлення з'єднання).
Повна екосистема працює як єдина система, забезпечуючи потік даних від IoT-пристроїв до серверу та потім до веб- і мобільних клієнтів. Датчики руху автоматично тригерують освітлення, здійснюється моніторинг стану всього обладнання в реальному часі, забезпечується швидке виявлення та повідомлення про несправності, а також відбувається оптимізація аналізу патернів відвідувань для енергоефективного освітлення.

3.2 Scope of Subsequent Releases
Застосування штучного інтелекту передбачає прогнозування патернів відвідувань за допомогою машинного навчання для аналізу історичних даних руху, автоматичне налаштування базового рівня освітлення на основі прогнозованої відвідуваності та сезонну адаптацію освітлення з урахуванням погодних умов та святкових періодів. Предиктивне обслуговування включає виявлення аномалій у роботі обладнання до критичних поломок, прогнозування термінів заміни ламп та технічного обслуговування, а також оптимізацію графіків профілактичних робіт на основі ML-моделей. Динамічна оптимізація енергоспоживання охоплює адаптацію яскравості в реальному часі на основі погодних умов, часу доби та активності, інтелектуальне групування ліхтарів для створення "світлових коридорів" за маршрутами руху та автоматичне балансування навантаження на електромережу.
Для навчання моделей збираються телеметричні дані від IoT-пристроїв (часові ряди показників споживання електроенергії з інтервалом у 1 хвилину, дані з датчиків руху з геопозиціонуванням та часовими мітками, показники температури, вологості та освітленості навколишнього середовища, статуси роботи обладнання та частота перемикань). Контекстуальні дані включають календарні події, свята та спеціальні заходи в парках, погодні умови з інтеграцією з метеослужбами, дані про плановані ремонти та обслуговування, а також інформацію про інциденти безпеки та надзвичайні ситуації. Користувацькі взаємодії охоплюють звіти про поломки з мобільного додатка з фотоматеріалами, відгуки користувачів про якість освітлення через рейтингову систему, дані про маршрути руху через опціональну GPS-аналітику та статистику використання різних зон парку. Методи збирання передбачають автоматичне логування всіх IoT-подій у структурованому форматі, батчевий експорт даних через планувальник завдань, Real-time стрімінг критичних подій через Apache Kafka та анонімізацію персональних даних відповідно до GDPR.
Навчання та використання ML-моделей базується на гібридному підході, що комбінує власні моделі та готові сервіси. Власні моделі (Custom Training) включають LSTM/GRU нейронні мережі для прогнозування відвідувань, Autoencoder для детекції аномалій у нетипових патернах енергоспоживання, K-means для кластеризації зон та групування ліхтарів за схожістю патернів використання, а також інфраструктуру TensorFlow/PyTorch з MLflow для версіонування моделей. Готові AI сервіси включають Google Vision API для автоматичного аналізу фотографій поломок, OpenWeatherMap API для інтеграції погодних прогнозів, AWS IoT Analytics для розширеної аналітики телеметрії та Azure Cognitive Services для обробки текстових звітів користувачів. Донавчання існуючих моделей передбачає Transfer Learning для адаптації готових моделей комп'ютерного зору, Fine-tuning GPT для налаштування мовних моделей та Federated Learning для децентралізованого навчання. Deployment та моніторинг здійснюються через Kubernetes для контейнеризації ML-сервісів, MLOps pipeline для автоматичного перенавчання моделей, A/B тестування для порівняння ефективності алгоритмів та постійний моніторинг метрик якості прогнозів.

3.3 Limitations and Exclusions
Технічні обмеження первинного релізу включають масштабованість, розраховану на максимум 1000 ліхтарів в одному парку, обмеження пропускної здатності IoT-комунікації до 100 повідомлень/секунду на сервер та оптимізацію веб-інтерфейсу для настільних браузерів з обмеженою підтримкою мобільних версій. Функціональні обмеження полягають у відсутності вбудованої системи біллінгу для точного розрахунку економії електроенергії, неможливості інтеграції з існуючими ERP-системами муніципалітетів без додаткової розробки та базовій системі ролей користувачів без гранульованих дозволів.
Свідомі виключення через обмеження часу охоплюють розширену аналітику: GIS-інтеграція, фінансова аналітика та сезонне планування відкладені. Інтеграційні можливості з Smart City платформами, енергопостачальниками та системами безпеки також відкладені.
Обмеження ШІ-функціональності майбутніх релізів передбачають, що точність прогнозування ML-моделей потребуватиме мінімум 6 місяців історичних даних, погодні аномалії можуть знижувати точність предикції, а сезонні зміни вимагатимуть щорічного перенавчання. Приватність та етичність вимагатимуть опціональності відстеження маршрутів користувачів та погодження використання зображень з камер з місцевими законами, а зберігання біометричних даних виключено через GDPR. Ресурсні обмеження включають потребу в додаткових серверних потужностях для обробки ML-моделей у реальному часі, збільшення обсягів даних через високочастотну телеметрію та необхідність спеціалізованих ML-інженерів. Фінансові обмеження полягають у вартості ліцензій на промислові AI-сервіси, потребі в GPU-кластерах для навчання власних нейронних мереж та необхідності виділеної команди data scientists для постійного оновлення моделей. Ці обмеження визначають реалістичні межі проекту та допомагають встановити правильні очікування зацікавлених сторін щодо можливостей системи у різних фазах розвитку.

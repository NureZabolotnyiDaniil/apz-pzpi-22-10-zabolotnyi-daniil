 
Міністерство освіти і науки України 
Харківський національний університет радіоелектроніки 
Кафедра програмної інженерії 
  
 
 
 
 
 
 
Практична робота №1 
з дисципліни: «Архітектура програмного забезпечення» 
  
 
 
 
 
  
Виконав:                                                                               Перевірив: 
ст. гр. ПЗПІ-22-10                                                                cт. в. каф. ПІ
Заболотний Д.М.                                                                  Сокорчук І. П.  
 
                                                  	 	 	 	 
 
 
 
 
Харків 2025  
Патерни проєктування

1Історія змін  
 
Таблиця 1.1 – Історія змін 
№ 	Дата 	Версія звіту 	Опис змін та виправлень 
1 	31.05.25 	0.1 	Додано титульну сторінку та розділ «Історія змін» 
2 	31.05.25 	0.2 	Додано розділ «Завдання до практичної роботи»
3 	31.05.25 	0.3 	Додано розділ «Опис виконаної роботи»
4 	31.05.25 	0.4 	Додано розділ «Висновки» 
5 	31.05.25 	0.5 	Додано додаток А
6 	31.05.25 	0.6 	Додано додаток Б
7	31.05.2025	0.7	Додано додаток В
 	
 
2Завдання до практичної роботи 

У межах даної практичної роботи потрібно розповісти про архітектуру обраної відомої системи, створити презентацію.
Метою практичної роботи було дослідження структурного патерну проєктування Proxy. Завдання полягало у створенні презентації, яка б розкривала суть патерну, його структуру, принцип роботи, переваги та недоліки, а також ілюструвала його застосування на практичних прикладах та у коді.


3Опис виконаної роботи 

В ході виконання роботи було досліджено патерн та створено презентацію на тему. Було розглянуто визначення та основні цілі патерну. За допомогою діаграм було продемонстровано принцип роботи та ключові компоненти структури.
Для кращого розуміння були наведені приклади з реального життя. Практичне застосування патерну було продемонстровано на прикладі проблеми завантаження великих медичних зображень, де Proxy використовується для "лінивої ініціалізації", надаючи спочатку легкі мініатюри. Також було представлено фрагмент коду, що ілюструє цю реалізацію. Наприкінці були проаналізовані переваги та недоліки патерну.

4Висновки 

Патерн Proxy є ефективним інструментом для контролю доступу до об'єктів та оптимізації ресурсів. Він дозволяє керувати життєвим циклом ресурсомістких об'єктів, реалізуючи "ліниву ініціалізацію", та додавати допоміжну функціональність без зміни коду основного об'єкта. Хоча використання Proxy може дещо ускладнити архітектуру та додати непрямі виклики, його переваги є вирішальними в системах, де потрібна оптимізація продуктивності та гнучке керування доступом.
  	 


Додаток А 
Хронологічний опис та посилання 
 
 
Відеозапис доповіді на YouTube: https://youtu.be/Kri5i6JySik
Хронологічний опис доповіді: 
00:00 Вступ
00:14 Що таке патерн проєктування proxy
00:39 Принцип роботи патерну проєктування proxy
01:09 Структура патерну
03:03 Приклади роботи патерну проєктування proxy
04:30 Приклад: високоякісні знімки МРТ, які завантажуються при кожному зверненні
06:03 Вирішення
07:31 Приклад реалізації
08:53 Переваги патерну proxy
09:33 Недоліки використання патерну proxy
10:00 Висновки
10:21 Список використаних джерел	 

Додаток Б 
Слайди презентації доповіді 
 
 
Рисунок Б.1 – Титульний слайд 
 
 
Рисунок Б.2 – Огляд патерну


Рисунок Б.3 – Принцип роботи патерну


Рисунок Б.4 – Структура патерну proxy


Рисунок Б.5 – Приклад з життя


Рисунок Б.6 – Приклад проблеми. Медичні знімки


Рисунок Б.7 – Рішення за допомогою proxy


Рисунок Б.8 – Реалізація рішення


Рисунок Б.9 – Переваги патерну proxy


Рисунок Б.10 – Недоліки патерну proxy


Рисунок Б.11 – Висновок


Рисунок Б.12 – Список використаних джерел


Додаток В
Приклади програмного коду

1  class MedicalImage:
2      def display(self): pass
3
4  class FullImage(MedicalImage):
5      def __init__(self, filename):
6          self._load_image(filename)
7      
8      def _load_image(self, filename):
9          print(f"Завантаження {filename} (4 ГБ)...")
10       
11      def display(self):
12          print("Відображення повного зображення")
13
14  class ImageProxy(MedicalImage):
15      def __init__(self, filename):
16          self.filename = filename
17          self.full_image = None
18          self.thumbnail = self._load_thumbnail() 
19      
20      def _load_thumbnail(self):
21          print(f"Завантаження мініатюри {self.filename} (50 КБ)")
22          return "[Мініатюра]"
23      
24      def display(self):
25          if self.full_image is None:
26              self.full_image = FullImage(self.filename)
27          self.full_image.display()
28 
29  image = ImageProxy("brain_scan.mri")
30  image.display()
